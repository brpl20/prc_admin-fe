const axios = require('axios');

// Configure axios to connect to backend
const api = axios.create({
  baseURL: 'http://localhost:3000/api/v1',
  headers: {
    'Content-Type': 'application/json',
  },
});

async function testRegistration() {
  console.log('üöÄ Testing Simplified Registration Process\n');

  const testEmail = `test${Date.now()}@example.com`;
  const testPassword = 'TestPassword123';

  console.log('Test Configuration:');
  console.log(`  Email: ${testEmail}`);
  console.log(`  Password: ${testPassword}`);
  console.log('');

  console.log('1. Testing registration with email and password only...');
  try {
    const registrationData = {
      registration: {
        email: testEmail,
        password: testPassword,
        password_confirmation: testPassword,
      }
    };

    console.log('  Sending registration data:');
    console.log(`    - Email: ${registrationData.registration.email}`);
    console.log(`    - Password: [hidden]`);
    console.log(`    - Team will be auto-generated by backend`);

    const response = await api.post('/register', registrationData);
    
    console.log('‚úÖ Registration successful!');
    console.log(`   Response status: ${response.status}`);
    console.log(`   Created admin ID: ${response.data.id || 'N/A'}`);
    console.log(`   Team created: ${response.data.team ? 'Yes' : 'No'}`);
    
    if (response.data) {
      console.log('\n  Response details:', JSON.stringify(response.data, null, 2));
    }

    // Test 2: Attempt login with new credentials
    console.log('\n2. Testing login with new credentials...');
    try {
      const loginResponse = await api.post('/login', {
        email: testEmail,
        password: testPassword
      });
      
      console.log('‚úÖ Login successful!');
      console.log(`   Response status: ${loginResponse.status}`);
      if (loginResponse.data.token) {
        console.log('   JWT token received');
      }
    } catch (loginError) {
      console.log('‚ùå Login failed:', loginError.response?.data?.message || loginError.message);
    }

  } catch (error) {
    console.log('‚ùå Registration failed:', error.message);
    if (error.response) {
      console.log(`   Response status: ${error.response.status}`);
      if (error.response.data) {
        console.log('   Error details:', JSON.stringify(error.response.data, null, 2));
      }
    }
  }

  console.log('\n3. Testing validation - empty email...');
  try {
    const invalidData = {
      registration: {
        email: '',
        password: 'password123',
        password_confirmation: 'password123',
      }
    };

    await api.post('/register', invalidData);
    console.log('‚ùå Should have failed validation');
  } catch (error) {
    if (error.response && (error.response.status === 422 || error.response.status === 400)) {
      console.log('‚úÖ Validation working correctly');
      console.log(`   Error: ${error.response.data.errors || error.response.data.message}`);
    } else {
      console.log('‚ùå Unexpected error:', error.message);
    }
  }

  console.log('\n4. Testing duplicate email prevention...');
  try {
    // Try to register with the same email again
    const duplicateData = {
      registration: {
        email: testEmail,
        password: testPassword,
        password_confirmation: testPassword,
      }
    };

    await api.post('/register', duplicateData);
    console.log('‚ùå Should have prevented duplicate email');
  } catch (error) {
    if (error.response && (error.response.status === 422 || error.response.status === 400)) {
      console.log('‚úÖ Duplicate email prevention working');
      console.log(`   Error: ${error.response.data.errors || error.response.data.message}`);
    } else {
      console.log('‚ùå Unexpected error:', error.message);
    }
  }

  console.log('\nüèÅ Registration tests completed!\n');
}

// Run the test
testRegistration().catch(console.error);